/// Модедль продукта.

///

/// Содержит в себе название, цену, категорию и ссылку на изображение.

class ProductEntity {
  /// Название товара.

  final String title;

  /// Цена товара в копейках. Без скидки.

  ///

  /// Подумайте и ответьте на три вопроса:

  /// 1. Почему цена хранится в копейках, а не в рублях?

  /// 2. Почему тип данных цены - [int], а не [double]?

  /// 3. Как можно было реализовать передачу цены иначе?

  ///

  /// Ответы на вопросы разместите тут (они будут проверены при код-ревью):

  ///

  /// 1. Насколько я знаю, что все лучше хранить в минимальных еденицах. В данном примере, да и везде
  /// так нужно это перевести всего 1 раз при выводе, легче считать % - (все равно бы пришлость
  /// переводить сначала в копейки, вычитать % и обратно в рубли)
  ///
  /// 2. Наверное ответ можно продублировать из 1). Как вариант, инт занимает меньше памяти
  /// (не знаю как в дарте, кстати, но в С++, точно (4 байта и 8 байт - дабл)). С интом производится быстрее
  /// операции вычисления, чем с дабл. При работе с дабл возможны проблемы с округлением (потеря копеек).
  ///
  /// 3. Ну тут вопрос: "А нужно ли?"). Извратиться можно, как строку "32,55" и прарсить в дабл и переводить
  /// в копейки, или парсить в рубли и копейки а потом складывать. Но зачем...

  final int price;

  /// Категория товара.

  final Category category;

  /// Ссылка на изображение товара.

  final String imageUrl;

  /// Количество товара.

  ///

  /// Может быть описано в граммах [Grams] или в штуках [Quantity].

  final Amount amount;

  /// Скидка на товар.

  ///

  /// Требуется высчитать самостоятельно итоговую цену товара.

  final double sale;

  ProductEntity({
    required this.title,
    required this.price,
    required this.category,
    required this.imageUrl,
    required this.amount,
    this.sale = 0,
  });
}

/// Класс, описывающий количество товара.

sealed class Amount {
  int get value;
}

/// Класс, описывающий количество товара в граммах.

class Grams implements Amount {
  @override
  final int value;

  Grams(this.value);
}

/// Класс, описывающий количество товара в штуках.

class Quantity implements Amount {
  @override
  final int value;

  Quantity(this.value);
}

/// Категория товара.

enum Category {
  food('Продукты питания'),

  tech('Технологичные товары'),

  care('Уход'),

  drinks('Напитки'),

  drugs('Медикаменты');

  final String name;

  const Category(this.name);
}
